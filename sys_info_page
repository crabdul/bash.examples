#!/bin/bash

# Program to output a system information page

PROGNAME=$(basename $0)
TITLE="System Information Report For $HOSTNAME"
CURRENT_TIME=$(date +"%x %r %Z")
TIME_STAMP="Generated $CURRENT_TIME, by $USER"

report_uptime () {
    cat <<- _EOF_
            <h2>System Uptime</h2>
            <pre>$(uptime)</pre>
_EOF_
    return
}

report_disk_space () {
    cat <<- _EOF_
            <h2>Disk Space Utilisation</h2>
            <pre>$(df -h)</pre>
_EOF_
    return
}

report_home_space () {
    cat <<- _EOF_
            <h2>Home Space Utilisation</h2>
            <pre>$(du -sh $HOME*)</pre>
_EOF_
    return
}

usage () {
    echo "$PROGNAME: usage: $PROGNAME [ -f file | -i ]"
    return
}

write_html_page () {
    cat << _EOF_
<html>
    <head>
        <title>$TITLE</title>
    </head>
    <body>
        <h1>$TITLE</h1>
        <p>$TIME_STAMP</p>
        $(report_uptime)
        $(report_disk_space)
    </body>
</html>
_EOF_

}

# process command line options

interactive=
filename=

# continues while positional argument is not empty
while [[ -n $1 ]]; do
    case $1 in
        -f | --file)            shift # advances to the filename argument
                                filename=$1
                                ;;
        -i | --interactive)     interactive=1
                                ;;
        -h | --help)            usage
                                exit
                                ;;
        *)                      usage >&2
                                exit 1
                                ;;
    esac
    shift
done


# interactive mode

if [[ -n $interactive ]]; then
    while true; do
        read -p "Enter name of output file: " filename
        if [[ -e $filename ]]; then
            read -p "'$filename' exists. Overwrite? [y/n/q] > "
            case $REPLY in
                Y|y)    break
                        ;;
                Q|q)    echo "Programm terminated"
                        exit
                        ;;
                *)      continue
                        ;;
            esac
        # true if length of string is zero
        elif [[ -z $filename ]]; then
            continue
        else
            break
        fi
    done
fi

# true if length of string is non-zero
if [[ -n $filename ]]; then
    # true if file exists and is a regular file
    if touch $filename && [[ -f $filename ]]; then
        write_html_page > $filename
    else
        echo "$PROGNAME: Cannot write file '$filename'" >&2
        exit 1
    fi
else
    write_html_page
fi

